{"version":3,"file":"DesignTokensDisplay-stories.cb2685b0744891b8a33d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAEA","sources":["webpack://mercury-storybook/./stories/FontsTokensDisplay.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport jsonTokens from './tokens.json';\n\n\n\nconst FontsTokensDisplay = () => {\n\n  // // Flatten the structure\n  // const result = Object.values(jsonTokens.global).reduce((acc, tokens) => {\n  //   Object.assign(acc, tokens);\n  //   return acc;\n  // }, {});\n\n  // const colorTokens = result;\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filteredTokens, setFilteredTokens] = useState(jsonTokens.global.fonts);\n\n\nconsole.log(jsonTokens.global.fonts)\n  // const handleMouseEnter = (e) => {\n  //   setIsHovered(true);\n  //   setTooltipPosition({ x: e.pageX, y: e.pageY });\n  // };\n\n  // const handleMouseLeave = () => {\n  //   setIsHovered(false);\n  //   setTooltipText('Copy to clipboard!')\n  // };\n\n  // const renderTooltip = (text) => {\n  //   return (\n  //     <div className=\"tooltip\" style={{ position: 'absolute', top: tooltipPosition.y-20, left: tooltipPosition.x, transform: 'translate(-50%, -100%)' }}>{text}\n  //     </div>\n  //   );\n  // };\n\n\n  // const handleSearch = (e) => {\n  //     const { value } = e.target;\n  //     setSearchQuery(value);\n\n  //     // Filter tokens based on the search query\n  //     const filtered = Object.keys(colorTokens['color']).reduce((acc, tokenName ) => {\n  //       if (tokenName.toLowerCase().includes(value.toLowerCase())) {\n  //         acc[tokenName] = colorTokens['color'][tokenName];\n  //       }\n  //       return acc;\n  //     }, {});\n\n  //     setFilteredTokens(filtered);\n  // };\n\n const JsonTable = () => {\n  const data = JSON.parse(jsonData);\n  const rows = Object.entries(data.global.fonts).map(([fontName, fontData]) => (\n    <tr key={fontName}>\n      <td>{fontName}</td>\n      <td>{fontData.value}</td>\n      <td>{fontData.type}</td>\n    </tr>\n  ));\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Font Name</th>\n          <th>Value</th>\n          <th>Type</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </table>\n  );\n};\n\n}\n\nexport default FontsTokensDisplay;"],"names":[],"sourceRoot":""}